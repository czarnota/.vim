priority -51

global !p
def get_function_name(t):
	tokens = t.split("(")
	return tokens[0] if tokens else t

def right_side(x):
	tokens = x.split("=")
	if len(tokens) == 1:
		return x 

	if tokens:
		return tokens[-1].strip(" ")
	
	return x;

def default_var(x):
	tokens = x.split("=")
	if len(tokens) == 1:
		return "err" 

	if tokens:
		return tokens[0].strip("\t\n ")
	
	return "err";

endglobal

snippet m "C method" b
${1:int} (*${2:function_name})(struct ${3:class_name} * self${4:, ...});
endsnippet

snippet ifcpp "ifdef cpluscplus" b
#ifdef __cplusplus
extern "C" {
#endif
	${VISUAL}${0}
#ifdef __cplusplus
}
#endif
endsnippet


snippet get "Creates getter" b
static ${1:int} get_${2:field}(struct ${3:classname} * self)
{
	return self->p->$2;
}
endsnippet

snippet iferr "Error handling with if" b
${1:`!p snip.rv = default_var(snip.v.text)`} = ${2:`!p snip.rv = right_side(snip.v.text.rstrip("; \n").lstrip("\t "))`};
if ($1) {
	fprintf(stderr, "`!p snip.rv = get_function_name(right_side(t[2]))` failed\n");
	goto err;
}
$0
endsnippet
